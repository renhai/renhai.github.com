<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[安迪的博客]]></title>
  <link href="http://renhai.github.io/atom.xml" rel="self"/>
  <link href="http://renhai.github.io/"/>
  <updated>2014-07-04T13:10:06+08:00</updated>
  <id>http://renhai.github.io/</id>
  <author>
    <name><![CDATA[安迪]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发中一些常用的宏定义]]></title>
    <link href="http://renhai.github.io/blog/2014/06/26/ios-common-macro/"/>
    <updated>2014-06-26T17:51:36+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/26/ios-common-macro</id>
    <content type="html"><![CDATA[<h4>iOS开发中巧妙的运用宏定义不仅可以提高开发效率还可以减少代码量，以下是我在开发过程中经常用到的一些宏定义，今后还会继续扩充。<!--more--></h4>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//-------------------打印日志-------------------------
</span><span class='line'>//DEBUG  模式下打印日志,当前行
</span><span class='line'>#ifdef DEBUG
</span><span class='line'>#   define DLog(fmt, ...) NSLog((@"%s [Line %d] " fmt), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__);
</span><span class='line'>#else
</span><span class='line'>#   define DLog(...)
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//重写NSLog,Debug模式下打印日志和当前行数
</span><span class='line'>#if DEBUG
</span><span class='line'>#define NSLog(FORMAT, ...) fprintf(stderr,"\nfunction:%s line:%d content:%s\n", __FUNCTION__, __LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String]);
</span><span class='line'>#else
</span><span class='line'>#define NSLog(FORMAT, ...) nil
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>//DEBUG  模式下打印日志,当前行 并弹出一个警告
</span><span class='line'>#ifdef DEBUG
</span><span class='line'>#   define ULog(fmt, ...)  { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@"%s\n [Line %d] ", __PRETTY_FUNCTION__, __LINE__] message:[NSString stringWithFormat:fmt, ##__VA_ARGS__]  delegate:nil cancelButtonTitle:@"Ok" otherButtonTitles:nil]; [alert show]; }
</span><span class='line'>#else
</span><span class='line'>#   define ULog(...)
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//------------------------------------Simulator/Device
</span><span class='line'>//区分模拟器和真机
</span><span class='line'>#if TARGET_OS_IPHONE
</span><span class='line'>//iPhone Device
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>#if TARGET_IPHONE_SIMULATOR
</span><span class='line'>//iPhone Simulator
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>//------------------------------------ARC/no RAC
</span><span class='line'>//ARC
</span><span class='line'>#if __has_feature(objc_arc)
</span><span class='line'>//compiling with ARC
</span><span class='line'>#else
</span><span class='line'>// compiling without ARC
</span><span class='line'>#endif
</span><span class='line'>
</span><span class='line'>//Block
</span><span class='line'>typedef void(^VoidBlock)();
</span><span class='line'>typedef BOOL(^BoolBlock)();
</span><span class='line'>typedef int (^IntBlock) ();
</span><span class='line'>typedef id  (^IDBlock)  ();
</span><span class='line'>
</span><span class='line'>typedef void(^VoidBlock_int)(int);
</span><span class='line'>typedef BOOL(^BoolBlock_int)(int);
</span><span class='line'>typedef int (^IntBlock_int) (int);
</span><span class='line'>typedef id  (^IDBlock_int)  (int);
</span><span class='line'>
</span><span class='line'>typedef void(^VoidBlock_string)(NSString*);
</span><span class='line'>typedef BOOL(^BoolBlock_string)(NSString*);
</span><span class='line'>typedef int (^IntBlock_string) (NSString*);
</span><span class='line'>typedef id  (^IDBlock_string)  (NSString*);
</span><span class='line'>
</span><span class='line'>typedef void(^VoidBlock_id)(id);
</span><span class='line'>typedef BOOL(^BoolBlock_id)(id);
</span><span class='line'>typedef int (^IntBlock_id) (id);
</span><span class='line'>typedef id  (^IDBlock_id)  (id);
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//System
</span><span class='line'>#define PasteString(string)   [[UIPasteboard generalPasteboard] setString:string];
</span><span class='line'>#define PasteImage(image)     [[UIPasteboard generalPasteboard] setImage:image];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//Image
</span><span class='line'>//可拉伸的图片
</span><span class='line'>
</span><span class='line'>#define ResizableImage(name,top,left,bottom,right) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right)]
</span><span class='line'>#define ResizableImageWithMode(name,top,left,bottom,right,mode) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right) resizingMode:mode]
</span><span class='line'>
</span><span class='line'>//file
</span><span class='line'>//读取文件的文本内容,默认编码为UTF-8
</span><span class='line'>#define FileString(name,ext)            [[NSString alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)] encoding:NSUTF8StringEncoding error:nil]
</span><span class='line'>#define FileDictionary(name,ext)        [[NSDictionary alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)]]
</span><span class='line'>#define FileArray(name,ext)             [[NSArray alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)]]
</span><span class='line'>
</span><span class='line'>//数学
</span><span class='line'>#define PI 3.14159
</span><span class='line'>
</span><span class='line'>//输出frame(frame是结构体，没法%@)
</span><span class='line'>#define LOGFRAME(f) NSLog(@"\nx:%f\ny:%f\nwidth:%f\nheight:%f\n",f.origin.x,f.origin.y,f.size.width,f.size.height)
</span><span class='line'>#define LOGBOOL(b)  NSLog(@"%@",b?@"YES":@"NO");
</span><span class='line'>//弹出信息
</span><span class='line'>#define ALERT(msg) [[[UIAlertView alloc] initWithTitle:nil message:msg delegate:nil cancelButtonTitle:@"ok" otherButtonTitles:nil] show]
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//App
</span><span class='line'>#define kApp ((AppDelegate *)[UIApplication sharedApplication].delegate)
</span><span class='line'>#define kNav ((AppDelegate *)[UIApplication sharedApplication].delegate.navigationController)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//color
</span><span class='line'>#define RGB(r, g, b)             [UIColor colorWithRed:((r) / 255.0) green:((g) / 255.0) blue:((b) / 255.0) alpha:1.0]
</span><span class='line'>#define RGBAlpha(r, g, b, a)     [UIColor colorWithRed:((r) / 255.0) green:((g) / 255.0) blue:((b) / 255.0) alpha:(a)]
</span><span class='line'>
</span><span class='line'>#define HexRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue & 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:1.0]
</span><span class='line'>#define HexRGBAlpha(rgbValue,a) [UIColor colorWithRed:((float)((rgbValue & 0xFF0000) &gt;&gt; 16))/255.0 green:((float)((rgbValue & 0xFF00) &gt;&gt; 8))/255.0 blue:((float)(rgbValue & 0xFF))/255.0 alpha:(a)]
</span><span class='line'>
</span><span class='line'>//转换
</span><span class='line'>#define I2S(number) [NSString stringWithFormat:@"%d",number]
</span><span class='line'>#define F2S(number) [NSString stringWithFormat:@"%f",number]
</span><span class='line'>#define DATE(stamp) [NSDate dateWithTimeIntervalSince1970:[stamp intValue]];
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//设备屏幕尺寸
</span><span class='line'>#define kScreen_Height   ([UIScreen mainScreen].bounds.size.height)
</span><span class='line'>#define kScreen_Width    ([UIScreen mainScreen].bounds.size.width)
</span><span class='line'>#define kScreen_Frame    (CGRectMake(0, 0 ,kScreen_Width,kScreen_Height))
</span><span class='line'>#define kScreen_CenterX  kScreen_Width/2
</span><span class='line'>#define kScreen_CenterY  kScreen_Height/2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//应用尺寸(不包括状态栏,通话时状态栏高度不是20，所以需要知道具体尺寸)
</span><span class='line'>#define kContent_Height   ([UIScreen mainScreen].applicationFrame.size.height)
</span><span class='line'>#define kContent_Width    ([UIScreen mainScreen].applicationFrame.size.width)
</span><span class='line'>#define kContent_Frame    (CGRectMake(0, 0 ,kContent_Width,kContent_Height))
</span><span class='line'>#define kContent_CenterX  kContent_Width/2
</span><span class='line'>#define kContent_CenterY  kContent_Height/2
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'>类似九宫格的九个点
</span><span class='line'> 
</span><span class='line'> p1 --- p2 --- p3
</span><span class='line'> |      |      |
</span><span class='line'> p4 --- p5 --- p6
</span><span class='line'> |      |      |
</span><span class='line'> p7 --- p8 --- p9
</span><span class='line'> 
</span><span class='line'>*/
</span><span class='line'>#define kP1 CGPointMake(0                 ,0)
</span><span class='line'>#define kP2 CGPointMake(kContent_Width/2  ,0)
</span><span class='line'>#define kP3 CGPointMake(kContent_Width    ,0)
</span><span class='line'>#define kP4 CGPointMake(0                 ,kContent_Height/2)
</span><span class='line'>#define kP5 CGPointMake(kContent_Width/2  ,kContent_Height/2)
</span><span class='line'>#define kP6 CGPointMake(kContent_Width    ,kContent_Height/2)
</span><span class='line'>#define kP7 CGPointMake(0                 ,kContent_Height)
</span><span class='line'>#define kP8 CGPointMake(kContent_Width/2  ,kContent_Height)
</span><span class='line'>#define kP9 CGPointMake(kContent_Width    ,kContent_Height)
</span><span class='line'>
</span><span class='line'>//*********************************************
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//GCD
</span><span class='line'>#define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)
</span><span class='line'>#define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//Device
</span><span class='line'>#define isIOS4 ([[[UIDevice currentDevice] systemVersion] intValue]==4)
</span><span class='line'>#define isIOS5 ([[[UIDevice currentDevice] systemVersion] intValue]==5)
</span><span class='line'>#define isIOS6 ([[[UIDevice currentDevice] systemVersion] intValue]==6)
</span><span class='line'>#define isIOS7 ([[[UIDevice currentDevice] systemVersion] intValue]==7)
</span><span class='line'>#define isAfterIOS4 ([[[UIDevice currentDevice] systemVersion] intValue]&gt;4)
</span><span class='line'>#define isAfterIOS5 ([[[UIDevice currentDevice] systemVersion] intValue]&gt;5)
</span><span class='line'>#define isAfterIOS6 ([[[UIDevice currentDevice] systemVersion] intValue]&gt;6)
</span><span class='line'>#define isAfterIOS7 ([[[UIDevice currentDevice] systemVersion] intValue]&gt;7)
</span><span class='line'>
</span><span class='line'>#define iOS ([[[UIDevice currentDevice] systemVersion] floatValue])
</span><span class='line'>
</span><span class='line'>#define isRetina ([[UIScreen mainScreen] scale]==2)
</span><span class='line'>#define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)
</span><span class='line'>#define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//拨打电话
</span><span class='line'>#define canTel                 ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@"tel:"]])
</span><span class='line'>#define tel(phoneNumber)       ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"tel:%@",phoneNumber]]])
</span><span class='line'>#define telprompt(phoneNumber) ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@"telprompt:%@",phoneNumber]]])
</span><span class='line'>
</span><span class='line'>//打开URL
</span><span class='line'>#define canOpenURL(appScheme) ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:appScheme]])
</span><span class='line'>#define openURL(appScheme) ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:appScheme]])
</span><span class='line'>
</span><span class='line'>///////////////////////////////////////////////////////////////////
</span><span class='line'>///////////////////////////////////////////////////////////////////
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#define RGBCOLOR(r,g,b) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]
</span><span class='line'>#define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:(r)/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]
</span><span class='line'>#define CLEARCOLOR [UIColor clearColor]
</span><span class='line'>#define MAIN_COLOR [UIColor colorWithRed:33.0/255.0 green:185.0/255.0 blue:162.0/255.0 alpha:1.0]
</span><span class='line'>
</span><span class='line'>#define SCREEN_WIDTH ([[UIScreen mainScreen]bounds].size.width)
</span><span class='line'>#define SCREEN_HEIGHT ([[UIScreen mainScreen]bounds].size.height)
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * iPhone statusbar 高度
</span><span class='line'> */
</span><span class='line'>#define STATUSBAR_HEIGHT 20
</span><span class='line'>
</span><span class='line'>/*
</span><span class='line'> * iPhone 默认导航条高度
</span><span class='line'> */
</span><span class='line'>#define NAVIGATIONBAR_HEIGHT 44.0f
</span><span class='line'>#define NAVIGATIONBAR_IOS7_HEIGHT 64.0f
</span><span class='line'>// tabBar高度
</span><span class='line'>#define TABBAR_HEIGHT 49.0f
</span><span class='line'>#define ENGISH_KEYBOARD_HEIGHT 216.0
</span><span class='line'>
</span><span class='line'>#define LINE_HEIGHT (isRetina ? 0.5 : 1.0)
</span><span class='line'>
</span><span class='line'>//检查系统版本
</span><span class='line'>#define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)
</span><span class='line'>#define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)
</span><span class='line'>#define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)
</span><span class='line'>#define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)
</span><span class='line'>#define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>//----------------------图片----------------------------
</span><span class='line'>
</span><span class='line'>//读取本地图片
</span><span class='line'>#define IMAGE_WITH_TYPE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]
</span><span class='line'>
</span><span class='line'>//定义UIImage对象
</span><span class='line'>#define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]
</span><span class='line'>
</span><span class='line'>//----------------------图片----------------------------
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx配置www域名和无www域名互转]]></title>
    <link href="http://renhai.github.io/blog/2014/06/26/nginx-www-to-nonwww/"/>
    <updated>2014-06-26T15:42:45+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/26/nginx-www-to-nonwww</id>
    <content type="html"><![CDATA[<p>最近申请了自己的域名，并在dnspod上将域名指向在digitalocean申请的vps，vps上安装了nginx，一番折腾后发现访问有www的域名和没有www的域名返回不同页面，google了一下，最后问题解决。</p>

<p>www.renhai.me转向renhai.me，配置如下：<!--more--></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  www.renhai.me renhai.me;
</span><span class='line'>    if ($host = 'www.renhai.me' ) {
</span><span class='line'>            rewrite ^/(.*)$ http://renhai.me/$1 permanent;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    ......
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>同理，也可以将renhai.me转向www.renhai.me，配置如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  www.renhai.me renhai.me;
</span><span class='line'>    if ($host = 'renhai.me' ) {
</span><span class='line'>            rewrite ^/(.*)$ http://www.renhai.me/$1 permanent;
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    ......
</span><span class='line'>    
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>另一种方式是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>server {
</span><span class='line'>    listen       80;
</span><span class='line'>    server_name  www.renhai.me;
</span><span class='line'>
</span><span class='line'>    location / {
</span><span class='line'>        root   html;
</span><span class='line'>        index  index.html index.htm;
</span><span class='line'>        
</span><span class='line'>        ......
</span><span class='line'>        
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>server {
</span><span class='line'>    listen  80;
</span><span class='line'>    server_name renhai.me;
</span><span class='line'>    return  301 http://www.renhai.me$request_uri;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>推荐使用第一种方式。</p>

<p>测试一下：</p>

<p><a href="http://www.renhai.me">http://www.renhai.me</a></p>

<p><a href="http://renhai.me">http://renhai.me</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 和 iOS 开发资源汇总]]></title>
    <link href="http://renhai.github.io/blog/2014/06/26/ios-resources/"/>
    <updated>2014-06-26T13:51:48+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/26/ios-resources</id>
    <content type="html"><![CDATA[<h3>中文资源</h3>

<hr />

<p><a href="http://blog.devtang.com">唐巧的技术博客</a></p>

<p><a href="http://beyondvincent.com">破船之家</a></p>

<p><a href="http://www.imallen.com">I&rsquo;m Allen</a></p>

<p><a href="http://lianxu.me/">http://lianxu.me/</a></p>

<!--more-->


<h3>国外资源</h3>

<hr />

<p><a href="http://www.objc.io">Objc.io</a> 讨论 ObjC 的高级实现和深入技巧</p>

<p><a href="http://iosdevweekly.com">http://iosdevweekly.com</a> 杂志式的每周订阅的 iOS 开发咨询</p>

<p><a href="http://www.raywenderlich.com">Ray Wenderlich的博客</a> 有一些易于学习的教程</p>

<p><a href="http://www.mattgemmell.com">Matt Gemmell的博客</a> Matt对Objective-C 开发拥有丰富的经验和观点，这些观点非常值得我们去关注</p>

<h3>其他资源</h3>

<hr />

<p><a href="http://www.cnblogs.com/yingkong1987/archive/2013/07/24/3209777.html">http://www.cnblogs.com/yingkong1987/archive/2013/07/24/3209777.html</a></p>

<p><a href="http://rrurl.cn/2nl6sB">http://rrurl.cn/2nl6sB</a></p>

<p><a href="http://blog.csdn.net/zhibudefeng/article/details/8822597">http://blog.csdn.net/zhibudefeng/article/details/8822597</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell脚本中一些常用特殊变量的含义]]></title>
    <link href="http://renhai.github.io/blog/2014/06/25/shell-special-variables/"/>
    <updated>2014-06-25T17:25:29+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/25/shell-special-variables</id>
    <content type="html"><![CDATA[<ul>
<li>$1 &ndash; $9 传递给shell脚本的第1-9个参数</li>
<li>$0 所执行脚本的名称</li>
<li>$# 传递给shell脚本的参数个数<!--more--></li>
<li>$? 命令执行结果反馈，0表示执行成功，其余数字表示执行不成功</li>
<li>$$ 当前执行脚本的pid</li>
<li>$! 运行在后台的最后一个作业的进程的pid</li>
<li>$* 以一个单字符串显示所有向脚本传递的参数（字符串）</li>
<li>$@ 所有命令行参数的内容（字符串数组）</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git必知必会]]></title>
    <link href="http://renhai.github.io/blog/2014/06/25/git-must-know/"/>
    <updated>2014-06-25T12:21:52+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/25/git-must-know</id>
    <content type="html"><![CDATA[<h2>git 配置查看</h2>

<hr />

<pre><code>git config -l
</code></pre>

<!--more-->


<h2>Log 查看</h2>

<hr />

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git log
</span><span class='line'>git log --stat 查看提交文件信息
</span><span class='line'>git log --graph 图形化查看提交log</span></code></pre></td></tr></table></div></figure>


<h2>分支</h2>

<hr />

<h3>本地新建一个分支并关联到远程分支</h3>

<pre><code>git checkout -b “本地新分支名” “远程分支名”
</code></pre>

<h3>本地删除分支</h3>

<pre><code>git branch -d “本地分支名”
</code></pre>

<h3>分支合并</h3>

<pre><code>git merge --no-ff 分支名
</code></pre>

<h3>干掉远程已删除分支</h3>

<pre><code>git remote prune origin
</code></pre>

<h2>tag 操作</h2>

<hr />

<h3>显示标签</h3>

<pre><code>git tag -l -n1
</code></pre>

<h3>创建本地标签</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git tag -m "message" V5.8.1
</span><span class='line'>git tag -a V7.3.1 -m "V7.3.1 发布"</span></code></pre></td></tr></table></div></figure>


<h3>将本地标签 push 到远程</h3>

<pre><code>git push origin V5.8.1
</code></pre>

<h2>常规操作流程</h2>

<hr />

<h3>git pull &mdash;rebase 冲突解决</h3>

<ol>
<li><p>确定当前分支状态</p>

<p> 当发生冲突时，会进入到临时的 rebase 状态，可使用 git status 或者 git branch 命令确定当前分支状态。</p></li>
<li><p>修改冲突</p>

<p> 推荐使用 vi 修改冲突，使用 vi /&lt;&lt;&lt;&lt;&lt;&lt;&lt; 命令定位冲突代码行，修改冲突，n 命令可向下搜索下一处冲突行，N 命令为向上搜索，直到确定文件没有冲突标记后才可退出编辑。
修改冲突时，如果是代码冲突，需要两位当事人在场确定冲突修改方案，如果没有询问其他代码作者擅自删除他人代码，导致工程功能不完整，事后会追究责任。</p></li>
<li><p>标记冲突解决</p>

<p> 使用 git add xxx 命令标记冲突解决，使用 git status 命令查看确定冲突状态是否解决。</p></li>
<li><p>rebase 继续</p>

<p> 解决完某 commit 冲突后，使用 git rebase &mdash;continue 命令继续 rebase 操作，如果遇到冲突再重复以上步骤，逐步解决所有冲突，直到 rebase 操作继续，回到原分支。</p></li>
<li><p>如果发生意外</p>

<p> 如果发生意外操作，使用 git rebase &mdash;abort 命令放弃本次 rebase 操作，之后 使用 git pull &mdash;rebase 命令重新操作</p></li>
</ol>


<h3>修改审核失败Patch流程</h3>

<ol>
<li><p>暂存本地修改</p>

<p> 使用 git stash 命令暂存本地修改。</p></li>
<li><p>退回到审核失败的patch commit</p>

<p> 使用 git rebase -i HEAD^ 命令退回到审核失败的Patch，^的数量为需修改 commit 距 HEAD 的commit 个数。
使用 commit sha号或者 HEAD~n 替代 HEAD^ 也可以。</p></li>
<li><p>在 rebase 选择界面，将需要修改的 commit 标识置为 edit</p>

<ul>
<li> pick 为不需修改，直接使用 commit；</li>
<li> reword 为只修改 commit message;</li>
<li> edit 为使用 commit，但会暂停到该 commit，暂停时可以修改该 commit，最后使用 amend 方法提交;</li>
<li> squash 跟前一个 commit 合并，但是保留 commit log 信息;</li>
<li> fixup 同 squash 类似，跟前一个commit合并，但是放弃 commit log 信息;</li>
<li> exec 运行命令行；</li>
</ul>
</li>
<li><p>修改审核失败的 commit</p>

<p> 开始 rebase 操作，当暂停在需修改 commit 时，可以对该 commit 做任何操作，按 Gerrit 中的审核意见修改 commit。</p></li>
<li><p>保存修改并提交</p>

<p> 修改完成后，类似常规 commit 操作，使用 git add . 添加修改，使用 git commit &mdash;amend 命令将修改合并到当前 commit 中。</p></li>
<li><p>继续 rebase 后面的 commit</p>

<p> 使用 git rebase &mdash;continue 命令继续 rebase 后面所有 commit</p></li>
<li><p>将修改完成后最新的 commit 提交到服务器。</p>

<p> 使用 git push 命令将修改后的 commit 提交到代码服务器。</p></li>
<li><p>取回本地暂存修</p>

<p> 使用 git stash pop 命令取回第一步中暂存到本地的修改。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 代码规范指南]]></title>
    <link href="http://renhai.github.io/blog/2014/06/24/objective-c-style-guide/"/>
    <updated>2014-06-24T17:33:06+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/24/objective-c-style-guide</id>
    <content type="html"><![CDATA[<h3>背景介绍</h3>

<hr />

<p>Objective-C 是 C 语言的扩展，增加了动态类型和面对对象的特性。它被设计成具有易读易用的，支持复杂的面向对象设计的编程语言。它是 Mac OS X 以及 iPhone 的主要开发语言。</p>

<p>本指南主要基于 <a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml">Google Objective-C Style Guide</a> 修改简化，作为 iOS Team 编码规范和 Code Review 指导。</p>

<!--more-->


<h3>留白和格式</h3>

<hr />

<h4>空格 vs. 制表符</h4>

<p>只使用空格，一次缩进4个空格。</p>

<pre><code>通过 IDE 设置缩进空格：
XCode：Preferences -&gt; Text Editing -&gt; Indentation
Prefer indent using: Spaces
Tab width: 4 spaces
Indent width: 4 spaces
</code></pre>

<h4>方法声明和定义</h4>

<p>+&ndash; 符号和返回类型之间须使用一个空格，参数列表中只有参数之间可以有空格。</p>

<p>方法应该像这样：</p>

<pre><code>- (void)doSomethingWithString:(NSString *)theString {
...
}
</code></pre>

<p>如果一行有非常多的参数，更好的方式是将每个参数单独拆成一行。如果使用多行，将每个参数前的冒号对齐。</p>

<pre><code>- (void)doSomethingWith:(GTMFoo *)theFoo
                   rect:(NSRect)theRect
               interval:(float)theInterval {
    ...
}
</code></pre>

<p>当第一个关键字比其它的短时，保证下一行至少有 4 个空格的缩进。这样可以使关键字垂直对齐，而不是使用冒号对齐：</p>

<pre><code>- (void)short:(GTMFoo *)theFoo
    longKeyword:(NSRect)theRect
    evenLongerKeyword:(float)theInterval {
...
}
</code></pre>

<h4>方法调用</h4>

<p>方法调用应尽量保持与方法声明的格式一致。</p>

<p>调用时所有参数应该在同一行：</p>

<pre><code>[myObject doFooWith:arg1 name:arg2 error:arg3];
</code></pre>

<p>或者每行一个参数，以冒号对齐：</p>

<pre><code>[myObject doFooWith:arg1
               name:arg2
              error:arg3];
</code></pre>

<p>不要使用下面的缩进风格：</p>

<pre><code>[myObject doFooWith:arg1 name:arg2  // some lines with &gt;1 arg
              error:arg3];

[myObject doFooWith:arg1
               name:arg2 error:arg3];

[myObject doFooWith:arg1
          name:arg2  // aligning keywords instead of    colons
          error:arg3];
</code></pre>

<p>方法定义与方法声明一样，当关键字的长度不足以以冒号对齐时，下一行都要以四个空格进行缩进。</p>

<pre><code>[myObj short:arg1
    longKeyword:arg2
    evenLongerKeyword:arg3];
</code></pre>

<h4>@public 和 @private</h4>

<p>@public 和 @private 访问修饰符应该以一个空格缩进。</p>

<pre><code>@interface MyClass : NSObject {
 @public
 ...
 @private
 ...
}
@end
</code></pre>

<h4>异常</h4>

<p>避免抛出异常。</p>

<h5>block</h5>

<p>取决于块的长度，下列都是合理的风格准则：</p>

<ul>
<li>如果一行可以写完块，则没必要换行。</li>
<li>如果不得不换行，关括号应与块声明的第一个字符对齐。</li>
<li>如果块太长，比如超过 20 行，建议把它定义成一个局部变量，然后再使用该变量。</li>
<li>如果块不带参数，<code>{</code> 之间无须空格。如果带有参数，<code>(</code> 之间无须空格，但 <code>) {</code> 之间须有一个空格。</li>
</ul>


<h3>命名</h3>

<hr />

<p>命名方法基本遵守<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html">Apple的官方标准</a>。</p>

<p>变量名使用驼峰命名法。</p>

<p>任何的类、类别、方法以及变量的名字中都使用全大写的首字母缩写，如URL，TIFF，EXIF等。</p>

<h4>类名</h4>

<p>类名（以及类别、协议名）应首字母大写，并以驼峰格式分割单词。</p>

<p>应用层代码，使用项目约定的前缀。</p>

<p>当编写的代码希望在不同项目中复用是，应使用相同的前缀。</p>

<h4>类别名</h4>

<p>类别名应该包含它所扩展的类的名字，在之后增加相关功能描述和“Additions”。
类别的文件名可以为“所扩展类名+类别功能描述”。
类名与包含类别名的括号之间，应该以一个空格分隔。</p>

<p>比如我们要基于 NSString 创建一个用于解析的类别，我们将把类别放在一个名为 GTMNSString+Parsing.h 的文件中。类别本身命名为 GTMStringParsingAdditions （是的，我们知道类别名和文件名不一样，但是这个文件中可能存在多个不同的与解析有关类别）。类别中的方法应该以 gtm_myCategoryMethodOnAString: 为前缀以避免命名冲突，因为 Objective-C 只有一个名字空间。如果代码不会分享出去，也不会运行在不同的地址空间中，方法名字就不那么重要了。</p>

<h4>文件名</h4>

<p>文件名须反映出其实现了什么类 – 包括大小写。遵循你所参与项目的约定。</p>

<p>文件的扩展名应该如下：</p>

<table>
<thead>
<tr>
<th align="center">扩展名 </th>
<th align="center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">.h     </td>
<td align="center">C/C++/Objective-C 的头文件</td>
</tr>
<tr>
<td align="center">.m     </td>
<td align="center">Ojbective-C 实现文件      </td>
</tr>
<tr>
<td align="center">.mm    </td>
<td align="center">Ojbective-C++ 的实现文件  </td>
</tr>
<tr>
<td align="center">.cc    </td>
<td align="center">纯 C++ 的实现文件         </td>
</tr>
<tr>
<td align="center">.c     </td>
<td align="center">纯 C 的实现文件 </td>
</tr>
</tbody>
</table>


<br />


<p>类别的文件名应该包含被扩展的类名，如：“GTMNSString+Utils.h” 或 “GTMNSTextView+Autocomplete.h”。</p>

<h4>方法名</h4>

<p>方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。</p>

<p>方法名应尽量读起来就像句子，这表示你应该选择与方法名连在一起读起来通顺的参数名。</p>

<p>访问器方法应该与他们 要获取的 成员变量的名字一样，但不应该以get作为前缀。例如：</p>

<pre><code>- (id)getDelegate;  // AVOID
- (id)delegate;     // GOOD
</code></pre>

<h4>变量名</h4>

<p>变量名应该以小写字母开头，并使用驼峰格式。类的成员变量应该以下划线作为前缀。例如：&#8221;myLocalVariable&#8221;、&#8221;_myInstanceVariable&#8221;。</p>

<h4>普通变量名</h4>

<p>对于静态的属性（<code>int</code> 或指针），不要使用匈牙利命名法。尽量为变量起一个描述性的名字。不要担心浪费列宽，因为让新的代码阅读者立即理解你的代码更重要。例如：</p>

<ul>
<li><p>错误的命名：</p>

<pre><code>int w;
int nerr;
int nCompConns;
tix = [[NSMutableArray alloc] init];
obj = [someObject object];
p = [network port];
</code></pre></li>
<li><p>正确的命名：</p>

<pre><code>int numErrors;
int numCompletedConnections;
tickets = [[NSMutableArray alloc] init];
userInfo = [someObject object];
port = [network port];
</code></pre></li>
</ul>


<h4>实例变量</h4>

<p>实例变量应该混合大小写，并以下划线作为前缀，如 _usernameTextField。</p>

<h4>常量</h4>

<p>常量名（如宏定义、枚举、静态局部变量等）应该以小写字母 k 开头，使用驼峰格式分隔单词，如：kInvalidHandle，kWritePerm。</p>

<h3>注释</h3>

<hr />

<p>尽管注释很重要，但最好的代码应该自成文档。与其给类型及变量起一个晦涩难懂的名字，再为它写注释，不如直接起一个有意义的名字。</p>

<p>当你写注释的时候，记得你是在给你的听众写，即下一个需要阅读你所写代码的贡献者。大方一点，下一个读代码的人可能就是你！</p>

<p>Objective-C 本来就是一个”啰嗦“的语言，除必要的注释外，在实现部分我们提倡尽量少注释儿依赖代码自解释，务必养成好的命名及代码习惯。</p>

<p>必要注释和迫不得已的注释需要遵循下列规范。</p>

<h4>文件注释</h4>

<p>文件注释为必须添加的注释，因为当文件需要修改时，可能需要联系原作者。</p>

<p>可依赖 IDE 提供的自动添加功能，文件注释应包含如下项：</p>

<ul>
<li>文件内容的简要描述</li>
<li>代码作者</li>
<li>版权信息声明（如：<code>Copyright 2008 Google Inc.</code>）</li>
<li>必要的话，加上许可证样板。为项目选择一个合适的授权样板（例如，<code>Apache 2.0, BSD, LGPL, GPL</code>）。</li>
</ul>


<p>如果你对其他人的原始代码作出重大的修改，请把你自己的名字添加到作者里面。当另外一个代码贡献者对文件有问题时，他需要知道怎么联系你，这十分有用。</p>

<h4>声明部分的注释</h4>

<p>每个接口、类别以及协议应辅以注释，以描述它的目的及与整个项目的关系。</p>

<h4>实现部分的注释</h4>

<p>使用 | 来引用注释中的变量名及符号名而不是使用引号。</p>

<p>这会避免二义性，尤其是当符号是一个常用词汇，这使用语句读起来很糟糕。例如，对于符号 count ：</p>

<pre><code>// Sometimes we need |count| to be less than zero.
</code></pre>

<p>或者当引用已经包含引号的符号：</p>

<pre><code>// Remember to call |StringWithoutSpaces("foo bar baz")|
</code></pre>

<h3>Cocoa 和 Objective-C 特性</h3>

<hr />

<h4>成员变量应该是 @private</h4>

<p>成员变量应该声明为 @private。</p>

<pre><code>@interface MyClass : NSObject {
 @private
    id myInstanceVariable_;
}
// public accessors, setter takes ownership
- (id)myInstanceVariable;
- (void)setMyInstanceVariable:(id)theVar;
@end
</code></pre>

<h4>明确指定构造函数</h4>

<p>对于需要继承你的类的人来说，明确指定构造函数十分重要。这样他们就可以只重写一个构造函数（可能是几个）来保证他们的子类的构造函数会被调用。这也有助于将来别人调试你的类时，理解初始化代码的工作流程。</p>

<h4>重载指定构造函数</h4>

<p>当你写子类的时候，如果需要 init… 方法，记得重载父类的指定构造函数。</p>

<p>如果你没有重载父类的指定构造函数，你的构造函数有时可能不会被调用，这会导致非常隐秘而且难以解决的 bug。</p>

<h4>重载 NSObject 的方法</h4>

<p>如果重载了 NSObject 类的方法，强烈建议把它们放在 @implementation 内的起始处，这也是常见的操作方法。</p>

<p>通常适用（但不局限）于 init&hellip;，copyWithZone，以及 dealloc 方法。</p>

<p>dealloc 为第一个重载的方法， init&hellip; 方法应该放在一起，copyWithZone: 紧随其后。</p>

<h4>初始化</h4>

<p>不要在 init 方法中，将成员变量初始化为 0 或者 nil, 对 objective-C 来说毫无必要。</p>

<h4>避免 +new</h4>

<p>不要调用 NSObject 类方法 new<code>，也不要在子类中重载它。使用</code>alloc 和 init 方法创建并初始化对象。</p>

<p>现代的 Ojbective-C 代码通过调用 alloc 和 init 方法来创建并 retain 一个对象。由于类方法 new 很少使用，这使得有关内存分配的代码审查更困难。</p>

<h4>保持公共 API 简单</h4>

<p>保持类简单；避免 “厨房水槽（kitchen-sink）” 式的 API。如果一个函数压根没必要公开，就不要这么做。用私有类别保证公共头文件整洁。</p>

<p>与 C++ 不同，Objective-C 没有方法来区分公共的方法和私有的方法 – 所有的方法都是公共的（译者注：这取决于 Objective-C 运行时的方法调用的消息机制）。因此，除非客户端的代码期望使用某个方法，不要把这个方法放进公共 API 中。尽可能的避免了你不希望被调用的方法却被调用到。这包括重载父类的方法。</p>

<p>对于内部实现所需要的方法，在实现的文件中定义一个类别，类别名位(private)，而不是把它们放进公有的头文件中。</p>

<pre><code>// GTMFoo.m
#import "GTMFoo.h"

@interface GTMFoo (private)
- (NSString *)doSomethingWithDelegate;  // Declare private method
@end

@implementation GTMFoo(private)
...
- (NSString *)doSomethingWithDelegate {
// Implement this method
}
...
@end
</code></pre>

<h4>#import and #include</h4>

<ul>
<li>当包含一个使用 Objective-C、Objective-C++ 的头文件时，使用 #import 。</li>
<li>当包含一个使用标准 C、C++ 头文件时，使用 #include， 头文件应该使用 #define 保护。</li>
</ul>


<h4>使用根框架</h4>

<p>#import 根框架而不是单独的零散文件</p>

<p>当你试图从框架（如 Cocoa 或者 Foundation）中包含若干零散的系统头文件时，实际上包含顶层根框架的话，编译器要做的工作更少。根框架通常已经经过预编译，加载更快。另外记得使用 #import 而不是 #include 来包含 Objective-C 的框架。</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;     // good

#import &lt;Foundation/NSArray.h&gt;        // avoid
#import &lt;Foundation/NSString.h&gt;
...
</code></pre>

<h4>BOOL</h4>

<p>将普通整形转换成 BOOL 时要小心。不要直接将 BOOL 值与 YES 进行比较。</p>

<p>Ojbective-C 中把 BOOL 定义成无符号字符型，这意味着 BOOL 类型的值远不止 YE(1)或 NO(0)。不要直接把整形转换成 BOOL。常见的错误包括将数组的大小、指针值及位运算的结果直接转换成 BOOL ，取决于整型结果的最后一个字节，很可能会产生一个 NO 值。当转换整形至 BOOL 时，使用三目操作符来返回 YES 或者 NO。（译者注：读者可以试一下任意的 256 的整数的转换结果，如 256、512 …）</p>

<p>你可以安全在 BOOL_Bool 以及 bool 之间转换（参见 C++ Std 4.7.4, 4.12 以及 C99 Std 6.3.1.2）。你不能安全在 BOOL 以及 Boolean 之间转换，因此请把 Boolean 当作一个普通整形，就像之前讨论的那样。但 Objective-C 的方法标识符中，只使用 BOOL。</p>

<p>对 BOOL 使用逻辑运算符（&amp;&amp;，|| 和 !）是合法的，返回值也可以安全地转换成BOOL，不需要使用三目操作符。</p>

<p>错误的用法：</p>

<pre><code>- (BOOL)isBold {
    return [self fontTraits] &amp; NSFontBoldTrait;
}
- (BOOL)isValid {
    return [self stringValue];
}
</code></pre>

<p>正确的用法：</p>

<pre><code>(BOOL)isBold {
    return ([self fontTraits] &amp; NSFontBoldTrait) ? YES : NO;
}
- (BOOL)isValid {
    return [self stringValue] != nil;
}
- (BOOL)isEnabled {
    return [self isValid] &amp;&amp; [self isBold];
}
</code></pre>

<p>同样，不要直接比较 YES/NO 和 BOOL 变量。不仅仅因为影响可读性，更重要的是结果可能与你想的不同。</p>

<p>错误的用法:</p>

<pre><code>BOOL great = [foo isGreat];
if (great == YES)
// ...be great!
</code></pre>

<p>正确的用法：</p>

<pre><code>BOOL great = [foo isGreat];
if (great)
// ...be great!
</code></pre>

<h4>属性（Property）</h4>

<p>属性（Property）通常允许使用，但需要清楚的了解：属性（Property）是 Objective-C 2.0 的特性，会限制你的代码只能跑在 iPhone 和 Mac OS X 10.5 (Leopard) 及更高版本上。点引用只允许访问声明过的 @property。</p>

<h4>命名</h4>

<p>属性所关联的实例变量的命名必须遵守以下划线作为前缀的规则。属性的名字应该与成员变量去掉下划线后缀的名字一模一样。</p>

<p>使用 @synthesize 指示符来正确地重命名属性。</p>

<pre><code>@interface MyClass : NSObject {
 @private
    NSString *name_;
}
@property(copy, nonatomic) NSString *name;
@end

@implementation MyClass
@synthesize name = name_;
@end
</code></pre>

<h4>位置</h4>

<p>属性的声明必须紧靠着类接口中的实例变量语句块。属性的定义必须在 @implementation 的类定义的最上方。他们的缩进与包含他们的 @interface 以及 @implementation 语句一样。</p>
]]></content>
  </entry>
  
</feed>
