<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ios | 安迪的博客]]></title>
  <link href="http://renhai.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://renhai.github.io/"/>
  <updated>2014-07-04T18:07:48+08:00</updated>
  <id>http://renhai.github.io/</id>
  <author>
    <name><![CDATA[安迪]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS开发中一些常用的宏定义]]></title>
    <link href="http://renhai.github.io/blog/2014/06/26/ios-common-macro/"/>
    <updated>2014-06-26T17:51:36+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/26/ios-common-macro</id>
    <content type="html"><![CDATA[<h4>iOS开发中巧妙的运用宏定义不仅可以提高开发效率还可以减少代码量，以下是我在开发过程中经常用到的一些宏定义，今后还会继续扩充。<!--more--></h4>

<hr />

<p>```
//&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-打印日志&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;
//DEBUG  模式下打印日志,当前行</p>

<h1>ifdef DEBUG</h1>

<h1>define DLog(fmt, &hellip;) NSLog((@&ldquo;%s [Line %d] &rdquo; fmt), <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>, ##<strong>VA_ARGS</strong>);</h1>

<h1>else</h1>

<h1>define DLog(&hellip;)</h1>

<h1>endif</h1>

<p>//重写NSLog,Debug模式下打印日志和当前行数</p>

<h1>if DEBUG</h1>

<h1>define NSLog(FORMAT, &hellip;) fprintf(stderr,&ldquo;\nfunction:%s line:%d content:%s\n&rdquo;, <strong>FUNCTION</strong>, <strong>LINE</strong>, [[NSString stringWithFormat:FORMAT, ##<strong>VA_ARGS</strong>] UTF8String]);</h1>

<h1>else</h1>

<h1>define NSLog(FORMAT, &hellip;) nil</h1>

<h1>endif</h1>

<p>//DEBUG  模式下打印日志,当前行 并弹出一个警告</p>

<h1>ifdef DEBUG</h1>

<h1>define ULog(fmt, &hellip;)  { UIAlertView *alert = [[UIAlertView alloc] initWithTitle:[NSString stringWithFormat:@&ldquo;%s\n [Line %d] &rdquo;, <strong>PRETTY_FUNCTION</strong>, <strong>LINE</strong>] message:[NSString stringWithFormat:fmt, ##<strong>VA_ARGS</strong>]  delegate:nil cancelButtonTitle:@&ldquo;Ok&rdquo; otherButtonTitles:nil]; [alert show]; }</h1>

<h1>else</h1>

<h1>define ULog(&hellip;)</h1>

<h1>endif</h1>

<p>//&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;Simulator/Device
//区分模拟器和真机</p>

<h1>if TARGET_OS_IPHONE</h1>

<p>//iPhone Device</p>

<h1>endif</h1>

<h1>if TARGET_IPHONE_SIMULATOR</h1>

<p>//iPhone Simulator</p>

<h1>endif</h1>

<p>//&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;ARC/no RAC
//ARC</p>

<h1>if __has_feature(objc_arc)</h1>

<p>//compiling with ARC</p>

<h1>else</h1>

<p>// compiling without ARC</p>

<h1>endif</h1>

<p>//Block
typedef void(^VoidBlock)();
typedef BOOL(^BoolBlock)();
typedef int (^IntBlock) ();
typedef id  (^IDBlock)  ();</p>

<p>typedef void(^VoidBlock_int)(int);
typedef BOOL(^BoolBlock_int)(int);
typedef int (^IntBlock_int) (int);
typedef id  (^IDBlock_int)  (int);</p>

<p>typedef void(^VoidBlock_string)(NSString<em>);
typedef BOOL(^BoolBlock_string)(NSString</em>);
typedef int (^IntBlock_string) (NSString<em>);
typedef id  (^IDBlock_string)  (NSString</em>);</p>

<p>typedef void(^VoidBlock_id)(id);
typedef BOOL(^BoolBlock_id)(id);
typedef int (^IntBlock_id) (id);
typedef id  (^IDBlock_id)  (id);</p>

<p>//System</p>

<h1>define PasteString(string)   [[UIPasteboard generalPasteboard] setString:string];</h1>

<h1>define PasteImage(image)     [[UIPasteboard generalPasteboard] setImage:image];</h1>

<p>//Image
//可拉伸的图片</p>

<h1>define ResizableImage(name,top,left,bottom,right) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right)]</h1>

<h1>define ResizableImageWithMode(name,top,left,bottom,right,mode) [[UIImage imageNamed:name] resizableImageWithCapInsets:UIEdgeInsetsMake(top,left,bottom,right) resizingMode:mode]</h1>

<p>//file
//读取文件的文本内容,默认编码为UTF-8</p>

<h1>define FileString(name,ext)            [[NSString alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)] encoding:NSUTF8StringEncoding error:nil]</h1>

<h1>define FileDictionary(name,ext)        [[NSDictionary alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)]]</h1>

<h1>define FileArray(name,ext)             [[NSArray alloc] initWithContentsOfFile:[[NSBundle mainBundle] pathForResource:(name) ofType:(ext)]]</h1>

<p>//数学</p>

<h1>define PI 3.14159</h1>

<p>//输出frame(frame是结构体，没法%@)</p>

<h1>define LOGFRAME(f) NSLog(@&ldquo;\nx:%f\ny:%f\nwidth:%f\nheight:%f\n&rdquo;,f.origin.x,f.origin.y,f.size.width,f.size.height)</h1>

<h1>define LOGBOOL(b)  NSLog(@&ldquo;%@&rdquo;,b?@&ldquo;YES&rdquo;:@&ldquo;NO&rdquo;);</h1>

<p>//弹出信息</p>

<h1>define ALERT(msg) [[[UIAlertView alloc] initWithTitle:nil message:msg delegate:nil cancelButtonTitle:@&ldquo;ok&rdquo; otherButtonTitles:nil] show]</h1>

<p>//App</p>

<h1>define kApp ((AppDelegate *)[UIApplication sharedApplication].delegate)</h1>

<h1>define kNav ((AppDelegate *)[UIApplication sharedApplication].delegate.navigationController)</h1>

<p>//color</p>

<h1>define RGB(r, g, b)             [UIColor colorWithRed:(&reg; / 255.0) green:((g) / 255.0) blue:((b) / 255.0) alpha:1.0]</h1>

<h1>define RGBAlpha(r, g, b, a)     [UIColor colorWithRed:(&reg; / 255.0) green:((g) / 255.0) blue:((b) / 255.0) alpha:(a)]</h1>

<h1>define HexRGB(rgbValue) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) >> 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) >> 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:1.0]</h1>

<h1>define HexRGBAlpha(rgbValue,a) [UIColor colorWithRed:((float)((rgbValue &amp; 0xFF0000) >> 16))/255.0 green:((float)((rgbValue &amp; 0xFF00) >> 8))/255.0 blue:((float)(rgbValue &amp; 0xFF))/255.0 alpha:(a)]</h1>

<p>//转换</p>

<h1>define I2S(number) [NSString stringWithFormat:@&ldquo;%d&rdquo;,number]</h1>

<h1>define F2S(number) [NSString stringWithFormat:@&ldquo;%f&rdquo;,number]</h1>

<h1>define DATE(stamp) [NSDate dateWithTimeIntervalSince1970:[stamp intValue]];</h1>

<p>//设备屏幕尺寸</p>

<h1>define kScreen_Height   ([UIScreen mainScreen].bounds.size.height)</h1>

<h1>define kScreen_Width    ([UIScreen mainScreen].bounds.size.width)</h1>

<h1>define kScreen_Frame    (CGRectMake(0, 0 ,kScreen_Width,kScreen_Height))</h1>

<h1>define kScreen_CenterX  kScreen_Width/2</h1>

<h1>define kScreen_CenterY  kScreen_Height/2</h1>

<p>//应用尺寸(不包括状态栏,通话时状态栏高度不是20，所以需要知道具体尺寸)</p>

<h1>define kContent_Height   ([UIScreen mainScreen].applicationFrame.size.height)</h1>

<h1>define kContent_Width    ([UIScreen mainScreen].applicationFrame.size.width)</h1>

<h1>define kContent_Frame    (CGRectMake(0, 0 ,kContent_Width,kContent_Height))</h1>

<h1>define kContent_CenterX  kContent_Width/2</h1>

<h1>define kContent_CenterY  kContent_Height/2</h1>

<p>/*
类似九宫格的九个点</p>

<p> p1 &mdash;&ndash; p2 &mdash;&ndash; p3
 |      |      |
 p4 &mdash;&ndash; p5 &mdash;&ndash; p6
 |      |      |
 p7 &mdash;&ndash; p8 &mdash;&ndash; p9</p>

<p>*/</p>

<h1>define kP1 CGPointMake(0                 ,0)</h1>

<h1>define kP2 CGPointMake(kContent_Width/2  ,0)</h1>

<h1>define kP3 CGPointMake(kContent_Width    ,0)</h1>

<h1>define kP4 CGPointMake(0                 ,kContent_Height/2)</h1>

<h1>define kP5 CGPointMake(kContent_Width/2  ,kContent_Height/2)</h1>

<h1>define kP6 CGPointMake(kContent_Width    ,kContent_Height/2)</h1>

<h1>define kP7 CGPointMake(0                 ,kContent_Height)</h1>

<h1>define kP8 CGPointMake(kContent_Width/2  ,kContent_Height)</h1>

<h1>define kP9 CGPointMake(kContent_Width    ,kContent_Height)</h1>

<p>//*********************************************</p>

<p>//GCD</p>

<h1>define BACK(block) dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), block)</h1>

<h1>define MAIN(block) dispatch_async(dispatch_get_main_queue(),block)</h1>

<p>//Device</p>

<h1>define isIOS4 ([[[UIDevice currentDevice] systemVersion] intValue]==4)</h1>

<h1>define isIOS5 ([[[UIDevice currentDevice] systemVersion] intValue]==5)</h1>

<h1>define isIOS6 ([[[UIDevice currentDevice] systemVersion] intValue]==6)</h1>

<h1>define isIOS7 ([[[UIDevice currentDevice] systemVersion] intValue]==7)</h1>

<h1>define isAfterIOS4 ([[[UIDevice currentDevice] systemVersion] intValue]>4)</h1>

<h1>define isAfterIOS5 ([[[UIDevice currentDevice] systemVersion] intValue]>5)</h1>

<h1>define isAfterIOS6 ([[[UIDevice currentDevice] systemVersion] intValue]>6)</h1>

<h1>define isAfterIOS7 ([[[UIDevice currentDevice] systemVersion] intValue]>7)</h1>

<h1>define iOS ([[[UIDevice currentDevice] systemVersion] floatValue])</h1>

<h1>define isRetina ([[UIScreen mainScreen] scale]==2)</h1>

<h1>define iPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)</h1>

<h1>define isPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)</h1>

<p>//拨打电话</p>

<h1>define canTel                 ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:@&ldquo;tel:&rdquo;]])</h1>

<h1>define tel(phoneNumber)       ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&ldquo;tel:%@&rdquo;,phoneNumber]]])</h1>

<h1>define telprompt(phoneNumber) ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:[NSString stringWithFormat:@&ldquo;telprompt:%@&rdquo;,phoneNumber]]])</h1>

<p>//打开URL</p>

<h1>define canOpenURL(appScheme) ([[UIApplication sharedApplication] canOpenURL:[NSURL URLWithString:appScheme]])</h1>

<h1>define openURL(appScheme) ([[UIApplication sharedApplication] openURL:[NSURL URLWithString:appScheme]])</h1>

<p>///////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////</p>

<h1>define RGBCOLOR(r,g,b) [UIColor colorWithRed:&reg;/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:1]</h1>

<h1>define RGBACOLOR(r,g,b,a) [UIColor colorWithRed:&reg;/255.0f green:(g)/255.0f blue:(b)/255.0f alpha:(a)]</h1>

<h1>define CLEARCOLOR [UIColor clearColor]</h1>

<h1>define MAIN_COLOR [UIColor colorWithRed:33.0/255.0 green:185.0/255.0 blue:162.0/255.0 alpha:1.0]</h1>

<h1>define SCREEN_WIDTH ([[UIScreen mainScreen]bounds].size.width)</h1>

<h1>define SCREEN_HEIGHT ([[UIScreen mainScreen]bounds].size.height)</h1>

<p>/<em>
 * iPhone statusbar 高度
 </em>/</p>

<h1>define STATUSBAR_HEIGHT 20</h1>

<p>/<em>
 * iPhone 默认导航条高度
 </em>/</p>

<h1>define NAVIGATIONBAR_HEIGHT 44.0f</h1>

<h1>define NAVIGATIONBAR_IOS7_HEIGHT 64.0f</h1>

<p>// tabBar高度</p>

<h1>define TABBAR_HEIGHT 49.0f</h1>

<h1>define ENGISH_KEYBOARD_HEIGHT 216.0</h1>

<h1>define LINE_HEIGHT (isRetina ? 0.5 : 1.0)</h1>

<p>//检查系统版本</p>

<h1>define SYSTEM_VERSION_EQUAL_TO(v)                  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedSame)</h1>

<h1>define SYSTEM_VERSION_GREATER_THAN(v)              ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending)</h1>

<h1>define SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(v)  ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedAscending)</h1>

<h1>define SYSTEM_VERSION_LESS_THAN(v)                 ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedAscending)</h1>

<h1>define SYSTEM_VERSION_LESS_THAN_OR_EQUAL_TO(v)     ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] != NSOrderedDescending)</h1>

<p>//&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;图片&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>//读取本地图片</p>

<h1>define IMAGE_WITH_TYPE(file,ext) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle]pathForResource:file ofType:ext]]</h1>

<p>//定义UIImage对象</p>

<h1>define IMAGE(A) [UIImage imageWithContentsOfFile:[[NSBundle mainBundle] pathForResource:A ofType:nil]]</h1>

<p>//&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;图片&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 和 iOS 开发资源汇总]]></title>
    <link href="http://renhai.github.io/blog/2014/06/26/ios-resources/"/>
    <updated>2014-06-26T13:51:48+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/26/ios-resources</id>
    <content type="html"><![CDATA[<h3>中文资源</h3>

<hr />

<p><a href="http://blog.devtang.com">唐巧的技术博客</a></p>

<p><a href="http://beyondvincent.com">破船之家</a></p>

<p><a href="http://www.imallen.com">I&rsquo;m Allen</a></p>

<p><a href="http://lianxu.me/">http://lianxu.me/</a></p>

<!--more-->


<h3>国外资源</h3>

<hr />

<p><a href="http://www.objc.io">Objc.io</a> 讨论 ObjC 的高级实现和深入技巧</p>

<p><a href="http://iosdevweekly.com">http://iosdevweekly.com</a> 杂志式的每周订阅的 iOS 开发咨询</p>

<p><a href="http://www.raywenderlich.com">Ray Wenderlich的博客</a> 有一些易于学习的教程</p>

<p><a href="http://www.mattgemmell.com">Matt Gemmell的博客</a> Matt对Objective-C 开发拥有丰富的经验和观点，这些观点非常值得我们去关注</p>

<h3>其他资源</h3>

<hr />

<p><a href="http://www.cnblogs.com/yingkong1987/archive/2013/07/24/3209777.html">http://www.cnblogs.com/yingkong1987/archive/2013/07/24/3209777.html</a></p>

<p><a href="http://rrurl.cn/2nl6sB">http://rrurl.cn/2nl6sB</a></p>

<p><a href="http://blog.csdn.net/zhibudefeng/article/details/8822597">http://blog.csdn.net/zhibudefeng/article/details/8822597</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C 代码规范指南]]></title>
    <link href="http://renhai.github.io/blog/2014/06/24/objective-c-style-guide/"/>
    <updated>2014-06-24T17:33:06+08:00</updated>
    <id>http://renhai.github.io/blog/2014/06/24/objective-c-style-guide</id>
    <content type="html"><![CDATA[<h3>背景介绍</h3>

<hr />

<p>Objective-C 是 C 语言的扩展，增加了动态类型和面对对象的特性。它被设计成具有易读易用的，支持复杂的面向对象设计的编程语言。它是 Mac OS X 以及 iPhone 的主要开发语言。</p>

<p>本指南主要基于 <a href="http://google-styleguide.googlecode.com/svn/trunk/objcguide.xml">Google Objective-C Style Guide</a> 修改简化，作为 iOS Team 编码规范和 Code Review 指导。</p>

<!--more-->


<h3>留白和格式</h3>

<hr />

<h4>空格 vs. 制表符</h4>

<p>只使用空格，一次缩进4个空格。</p>

<pre><code>通过 IDE 设置缩进空格：
XCode：Preferences -&gt; Text Editing -&gt; Indentation
Prefer indent using: Spaces
Tab width: 4 spaces
Indent width: 4 spaces
</code></pre>

<h4>方法声明和定义</h4>

<p>+&ndash; 符号和返回类型之间须使用一个空格，参数列表中只有参数之间可以有空格。</p>

<p>方法应该像这样：</p>

<pre><code>- (void)doSomethingWithString:(NSString *)theString {
...
}
</code></pre>

<p>如果一行有非常多的参数，更好的方式是将每个参数单独拆成一行。如果使用多行，将每个参数前的冒号对齐。</p>

<pre><code>- (void)doSomethingWith:(GTMFoo *)theFoo
                   rect:(NSRect)theRect
               interval:(float)theInterval {
    ...
}
</code></pre>

<p>当第一个关键字比其它的短时，保证下一行至少有 4 个空格的缩进。这样可以使关键字垂直对齐，而不是使用冒号对齐：</p>

<pre><code>- (void)short:(GTMFoo *)theFoo
    longKeyword:(NSRect)theRect
    evenLongerKeyword:(float)theInterval {
...
}
</code></pre>

<h4>方法调用</h4>

<p>方法调用应尽量保持与方法声明的格式一致。</p>

<p>调用时所有参数应该在同一行：</p>

<pre><code>[myObject doFooWith:arg1 name:arg2 error:arg3];
</code></pre>

<p>或者每行一个参数，以冒号对齐：</p>

<pre><code>[myObject doFooWith:arg1
               name:arg2
              error:arg3];
</code></pre>

<p>不要使用下面的缩进风格：</p>

<pre><code>[myObject doFooWith:arg1 name:arg2  // some lines with &gt;1 arg
              error:arg3];

[myObject doFooWith:arg1
               name:arg2 error:arg3];

[myObject doFooWith:arg1
          name:arg2  // aligning keywords instead of    colons
          error:arg3];
</code></pre>

<p>方法定义与方法声明一样，当关键字的长度不足以以冒号对齐时，下一行都要以四个空格进行缩进。</p>

<pre><code>[myObj short:arg1
    longKeyword:arg2
    evenLongerKeyword:arg3];
</code></pre>

<h4>@public 和 @private</h4>

<p>@public 和 @private 访问修饰符应该以一个空格缩进。</p>

<pre><code>@interface MyClass : NSObject {
 @public
 ...
 @private
 ...
}
@end
</code></pre>

<h4>异常</h4>

<p>避免抛出异常。</p>

<h5>block</h5>

<p>取决于块的长度，下列都是合理的风格准则：</p>

<ul>
<li>如果一行可以写完块，则没必要换行。</li>
<li>如果不得不换行，关括号应与块声明的第一个字符对齐。</li>
<li>如果块太长，比如超过 20 行，建议把它定义成一个局部变量，然后再使用该变量。</li>
<li>如果块不带参数，<code>{</code> 之间无须空格。如果带有参数，<code>(</code> 之间无须空格，但 <code>) {</code> 之间须有一个空格。</li>
</ul>


<h3>命名</h3>

<hr />

<p>命名方法基本遵守<a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/CodingGuidelines/CodingGuidelines.html">Apple的官方标准</a>。</p>

<p>变量名使用驼峰命名法。</p>

<p>任何的类、类别、方法以及变量的名字中都使用全大写的首字母缩写，如URL，TIFF，EXIF等。</p>

<h4>类名</h4>

<p>类名（以及类别、协议名）应首字母大写，并以驼峰格式分割单词。</p>

<p>应用层代码，使用项目约定的前缀。</p>

<p>当编写的代码希望在不同项目中复用是，应使用相同的前缀。</p>

<h4>类别名</h4>

<p>类别名应该包含它所扩展的类的名字，在之后增加相关功能描述和“Additions”。
类别的文件名可以为“所扩展类名+类别功能描述”。
类名与包含类别名的括号之间，应该以一个空格分隔。</p>

<p>比如我们要基于 NSString 创建一个用于解析的类别，我们将把类别放在一个名为 GTMNSString+Parsing.h 的文件中。类别本身命名为 GTMStringParsingAdditions （是的，我们知道类别名和文件名不一样，但是这个文件中可能存在多个不同的与解析有关类别）。类别中的方法应该以 gtm_myCategoryMethodOnAString: 为前缀以避免命名冲突，因为 Objective-C 只有一个名字空间。如果代码不会分享出去，也不会运行在不同的地址空间中，方法名字就不那么重要了。</p>

<h4>文件名</h4>

<p>文件名须反映出其实现了什么类 – 包括大小写。遵循你所参与项目的约定。</p>

<p>文件的扩展名应该如下：</p>

<table>
<thead>
<tr>
<th align="center">扩展名 </th>
<th align="center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">.h     </td>
<td align="center">C/C++/Objective-C 的头文件</td>
</tr>
<tr>
<td align="center">.m     </td>
<td align="center">Ojbective-C 实现文件      </td>
</tr>
<tr>
<td align="center">.mm    </td>
<td align="center">Ojbective-C++ 的实现文件  </td>
</tr>
<tr>
<td align="center">.cc    </td>
<td align="center">纯 C++ 的实现文件         </td>
</tr>
<tr>
<td align="center">.c     </td>
<td align="center">纯 C 的实现文件 </td>
</tr>
</tbody>
</table>


<br />


<p>类别的文件名应该包含被扩展的类名，如：“GTMNSString+Utils.h” 或 “GTMNSTextView+Autocomplete.h”。</p>

<h4>方法名</h4>

<p>方法名应该以小写字母开头，并混合驼峰格式。每个具名参数也应该以小写字母开头。</p>

<p>方法名应尽量读起来就像句子，这表示你应该选择与方法名连在一起读起来通顺的参数名。</p>

<p>访问器方法应该与他们 要获取的 成员变量的名字一样，但不应该以get作为前缀。例如：</p>

<pre><code>- (id)getDelegate;  // AVOID
- (id)delegate;     // GOOD
</code></pre>

<h4>变量名</h4>

<p>变量名应该以小写字母开头，并使用驼峰格式。类的成员变量应该以下划线作为前缀。例如："myLocalVariable"、"_myInstanceVariable"。</p>

<h4>普通变量名</h4>

<p>对于静态的属性（<code>int</code> 或指针），不要使用匈牙利命名法。尽量为变量起一个描述性的名字。不要担心浪费列宽，因为让新的代码阅读者立即理解你的代码更重要。例如：</p>

<ul>
<li><p>错误的命名：</p>

<pre><code>int w;
int nerr;
int nCompConns;
tix = [[NSMutableArray alloc] init];
obj = [someObject object];
p = [network port];
</code></pre></li>
<li><p>正确的命名：</p>

<pre><code>int numErrors;
int numCompletedConnections;
tickets = [[NSMutableArray alloc] init];
userInfo = [someObject object];
port = [network port];
</code></pre></li>
</ul>


<h4>实例变量</h4>

<p>实例变量应该混合大小写，并以下划线作为前缀，如 _usernameTextField。</p>

<h4>常量</h4>

<p>常量名（如宏定义、枚举、静态局部变量等）应该以小写字母 k 开头，使用驼峰格式分隔单词，如：kInvalidHandle，kWritePerm。</p>

<h3>注释</h3>

<hr />

<p>尽管注释很重要，但最好的代码应该自成文档。与其给类型及变量起一个晦涩难懂的名字，再为它写注释，不如直接起一个有意义的名字。</p>

<p>当你写注释的时候，记得你是在给你的听众写，即下一个需要阅读你所写代码的贡献者。大方一点，下一个读代码的人可能就是你！</p>

<p>Objective-C 本来就是一个”啰嗦“的语言，除必要的注释外，在实现部分我们提倡尽量少注释儿依赖代码自解释，务必养成好的命名及代码习惯。</p>

<p>必要注释和迫不得已的注释需要遵循下列规范。</p>

<h4>文件注释</h4>

<p>文件注释为必须添加的注释，因为当文件需要修改时，可能需要联系原作者。</p>

<p>可依赖 IDE 提供的自动添加功能，文件注释应包含如下项：</p>

<ul>
<li>文件内容的简要描述</li>
<li>代码作者</li>
<li>版权信息声明（如：<code>Copyright 2008 Google Inc.</code>）</li>
<li>必要的话，加上许可证样板。为项目选择一个合适的授权样板（例如，<code>Apache 2.0, BSD, LGPL, GPL</code>）。</li>
</ul>


<p>如果你对其他人的原始代码作出重大的修改，请把你自己的名字添加到作者里面。当另外一个代码贡献者对文件有问题时，他需要知道怎么联系你，这十分有用。</p>

<h4>声明部分的注释</h4>

<p>每个接口、类别以及协议应辅以注释，以描述它的目的及与整个项目的关系。</p>

<h4>实现部分的注释</h4>

<p>使用 | 来引用注释中的变量名及符号名而不是使用引号。</p>

<p>这会避免二义性，尤其是当符号是一个常用词汇，这使用语句读起来很糟糕。例如，对于符号 count ：</p>

<pre><code>// Sometimes we need |count| to be less than zero.
</code></pre>

<p>或者当引用已经包含引号的符号：</p>

<pre><code>// Remember to call |StringWithoutSpaces("foo bar baz")|
</code></pre>

<h3>Cocoa 和 Objective-C 特性</h3>

<hr />

<h4>成员变量应该是 @private</h4>

<p>成员变量应该声明为 @private。</p>

<pre><code>@interface MyClass : NSObject {
 @private
    id myInstanceVariable_;
}
// public accessors, setter takes ownership
- (id)myInstanceVariable;
- (void)setMyInstanceVariable:(id)theVar;
@end
</code></pre>

<h4>明确指定构造函数</h4>

<p>对于需要继承你的类的人来说，明确指定构造函数十分重要。这样他们就可以只重写一个构造函数（可能是几个）来保证他们的子类的构造函数会被调用。这也有助于将来别人调试你的类时，理解初始化代码的工作流程。</p>

<h4>重载指定构造函数</h4>

<p>当你写子类的时候，如果需要 init… 方法，记得重载父类的指定构造函数。</p>

<p>如果你没有重载父类的指定构造函数，你的构造函数有时可能不会被调用，这会导致非常隐秘而且难以解决的 bug。</p>

<h4>重载 NSObject 的方法</h4>

<p>如果重载了 NSObject 类的方法，强烈建议把它们放在 @implementation 内的起始处，这也是常见的操作方法。</p>

<p>通常适用（但不局限）于 init&hellip;，copyWithZone，以及 dealloc 方法。</p>

<p>dealloc 为第一个重载的方法， init&hellip; 方法应该放在一起，copyWithZone: 紧随其后。</p>

<h4>初始化</h4>

<p>不要在 init 方法中，将成员变量初始化为 0 或者 nil, 对 objective-C 来说毫无必要。</p>

<h4>避免 +new</h4>

<p>不要调用 NSObject 类方法 new<code>，也不要在子类中重载它。使用</code>alloc 和 init 方法创建并初始化对象。</p>

<p>现代的 Ojbective-C 代码通过调用 alloc 和 init 方法来创建并 retain 一个对象。由于类方法 new 很少使用，这使得有关内存分配的代码审查更困难。</p>

<h4>保持公共 API 简单</h4>

<p>保持类简单；避免 “厨房水槽（kitchen-sink）” 式的 API。如果一个函数压根没必要公开，就不要这么做。用私有类别保证公共头文件整洁。</p>

<p>与 C++ 不同，Objective-C 没有方法来区分公共的方法和私有的方法 – 所有的方法都是公共的（译者注：这取决于 Objective-C 运行时的方法调用的消息机制）。因此，除非客户端的代码期望使用某个方法，不要把这个方法放进公共 API 中。尽可能的避免了你不希望被调用的方法却被调用到。这包括重载父类的方法。</p>

<p>对于内部实现所需要的方法，在实现的文件中定义一个类别，类别名位(private)，而不是把它们放进公有的头文件中。</p>

<pre><code>// GTMFoo.m
#import "GTMFoo.h"

@interface GTMFoo (private)
- (NSString *)doSomethingWithDelegate;  // Declare private method
@end

@implementation GTMFoo(private)
...
- (NSString *)doSomethingWithDelegate {
// Implement this method
}
...
@end
</code></pre>

<h4>#import and #include</h4>

<ul>
<li>当包含一个使用 Objective-C、Objective-C++ 的头文件时，使用 #import 。</li>
<li>当包含一个使用标准 C、C++ 头文件时，使用 #include， 头文件应该使用 #define 保护。</li>
</ul>


<h4>使用根框架</h4>

<p>#import 根框架而不是单独的零散文件</p>

<p>当你试图从框架（如 Cocoa 或者 Foundation）中包含若干零散的系统头文件时，实际上包含顶层根框架的话，编译器要做的工作更少。根框架通常已经经过预编译，加载更快。另外记得使用 #import 而不是 #include 来包含 Objective-C 的框架。</p>

<pre><code>#import &lt;Foundation/Foundation.h&gt;     // good

#import &lt;Foundation/NSArray.h&gt;        // avoid
#import &lt;Foundation/NSString.h&gt;
...
</code></pre>

<h4>BOOL</h4>

<p>将普通整形转换成 BOOL 时要小心。不要直接将 BOOL 值与 YES 进行比较。</p>

<p>Ojbective-C 中把 BOOL 定义成无符号字符型，这意味着 BOOL 类型的值远不止 YE(1)或 NO(0)。不要直接把整形转换成 BOOL。常见的错误包括将数组的大小、指针值及位运算的结果直接转换成 BOOL ，取决于整型结果的最后一个字节，很可能会产生一个 NO 值。当转换整形至 BOOL 时，使用三目操作符来返回 YES 或者 NO。（译者注：读者可以试一下任意的 256 的整数的转换结果，如 256、512 …）</p>

<p>你可以安全在 BOOL_Bool 以及 bool 之间转换（参见 C++ Std 4.7.4, 4.12 以及 C99 Std 6.3.1.2）。你不能安全在 BOOL 以及 Boolean 之间转换，因此请把 Boolean 当作一个普通整形，就像之前讨论的那样。但 Objective-C 的方法标识符中，只使用 BOOL。</p>

<p>对 BOOL 使用逻辑运算符（&amp;&amp;，|| 和 !）是合法的，返回值也可以安全地转换成BOOL，不需要使用三目操作符。</p>

<p>错误的用法：</p>

<pre><code>- (BOOL)isBold {
    return [self fontTraits] &amp; NSFontBoldTrait;
}
- (BOOL)isValid {
    return [self stringValue];
}
</code></pre>

<p>正确的用法：</p>

<pre><code>(BOOL)isBold {
    return ([self fontTraits] &amp; NSFontBoldTrait) ? YES : NO;
}
- (BOOL)isValid {
    return [self stringValue] != nil;
}
- (BOOL)isEnabled {
    return [self isValid] &amp;&amp; [self isBold];
}
</code></pre>

<p>同样，不要直接比较 YES/NO 和 BOOL 变量。不仅仅因为影响可读性，更重要的是结果可能与你想的不同。</p>

<p>错误的用法:</p>

<pre><code>BOOL great = [foo isGreat];
if (great == YES)
// ...be great!
</code></pre>

<p>正确的用法：</p>

<pre><code>BOOL great = [foo isGreat];
if (great)
// ...be great!
</code></pre>

<h4>属性（Property）</h4>

<p>属性（Property）通常允许使用，但需要清楚的了解：属性（Property）是 Objective-C 2.0 的特性，会限制你的代码只能跑在 iPhone 和 Mac OS X 10.5 (Leopard) 及更高版本上。点引用只允许访问声明过的 @property。</p>

<h4>命名</h4>

<p>属性所关联的实例变量的命名必须遵守以下划线作为前缀的规则。属性的名字应该与成员变量去掉下划线后缀的名字一模一样。</p>

<p>使用 @synthesize 指示符来正确地重命名属性。</p>

<pre><code>@interface MyClass : NSObject {
 @private
    NSString *name_;
}
@property(copy, nonatomic) NSString *name;
@end

@implementation MyClass
@synthesize name = name_;
@end
</code></pre>

<h4>位置</h4>

<p>属性的声明必须紧靠着类接口中的实例变量语句块。属性的定义必须在 @implementation 的类定义的最上方。他们的缩进与包含他们的 @interface 以及 @implementation 语句一样。</p>
]]></content>
  </entry>
  
</feed>
