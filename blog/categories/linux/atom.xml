<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | 安迪的博客]]></title>
  <link href="http://renhai.github.io/blog/categories/linux/atom.xml" rel="self"/>
  <link href="http://renhai.github.io/"/>
  <updated>2015-08-19T17:53:33+08:00</updated>
  <id>http://renhai.github.io/</id>
  <author>
    <name><![CDATA[安迪]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Shell脚本攻略学习笔记1]]></title>
    <link href="http://renhai.github.io/blog/2015/08/19/linux-shell-scripting-cookbook-note1/"/>
    <updated>2015-08-19T17:17:22+08:00</updated>
    <id>http://renhai.github.io/blog/2015/08/19/linux-shell-scripting-cookbook-note1</id>
    <content type="html"><![CDATA[<h3>1.1 简介</h3>

<ol>
<li>打开终端会出现一个提示符，如<code>username@hostname$</code> 或者 <code>root@hostname#</code>，<code>$</code>表示普通用户，<code>#</code>表示超级用户</li>
<li>shell脚本通常以<code>#!</code>起始，如<code>#!/bin/bash</code>，<code>#!</code>读作shebang，<code>#</code>英语读作sharp或hash，<code>!</code>读作bang</li>
<li>执行脚本的两种方式：</li>
<li><code>sh script.sh</code> 将脚本做为sh的命令行参数执行，脚本中的shebang行就不起作用了</li>
<li><code>./script.sh</code> 首先要运行<code>chmod a+x script.sh</code>添加可执行权限，会识别shebang行，在内部已<code>/bin/bash script.sh</code>执行该脚本</li>
<li>在bash中，命令通过分号<code>;</code>或者换行来分隔，比如
 <code>$cmd1;cmd2</code>
等同于
 <code>$cmd1</code>
 <code>$cmd2</code></li>
</ol>


<hr />

<h3>1.2 终端打印</h3>

<h4>1.2.1 实战演练</h4>

<ol>
<li>echo 不带引号、单引号、双引号区别</li>
<li>printf  类似于C语言

<h4>1.2.2补充内容</h4></li>
<li>echo转义换行符<code>echo -e "1\t2\t3"</code></li>
<li>打印彩色输出<code>echo -e "\033[44;37;5m ME \033[0m COOL"</code></li>
</ol>


<hr />

<h3>1.3 玩转变量和环境变量</h3>

<ol>
<li><code>pgrep &lt;PID&gt;</code> <code>cat /proc/&lt;PID&gt;/environ</code></li>
<li>变量赋值 <code>var=value</code>,<strong>等号两边没有空格</strong></li>
<li><code>export</code>命令用来设置环境变量，<code>export PATH=$JAVA_HOME/bin:$PATH</code></li>
<li>获取字符串长度<code>echo ${#var}</code></li>
<li>识别当前shell版本<code>echo $SHELL</code>或<code>echo $0</code></li>
<li><p>检查用户是否为超级用户，root用户的$UID是0</p>

<p> <code>
 #!/bin/bash
 if [ $UID -ne 0 ]; then
 echo "Non root user. Please run as root."
 else
 echo "root user"
 fi
</code></p></li>
<li>修改bash提示字符串(<code>[root@vultr workspace]#</code>) ，修改<code>$PS1</code>变量</li>
</ol>


<hr />

<h3>1.4 通过shell进行数学运算</h3>

<p>利用let，(())，[]执行基本算数操作，expr和bc执行高级操作
1. let</p>

<pre><code>变量名之前不需要添加`$`
&gt; val1=4
 val2=3
let result=val1+val2
echo result

自加自减
&gt; let val++
let val--
</code></pre>

<ol>
<li><p>[]操作符</p>

<blockquote><p>result=$[ val1 + val2 ]</p></blockquote></li>
<li><p>(())操作符</p>

<blockquote><p>result=$((val1+val2))</p></blockquote></li>
<li><p>expr</p>

<blockquote><p>result=expr val1+val2
 或
 result=$(expr val1+val2)</p></blockquote></li>
</ol>


<p>以上只能用于整数运算，不支持浮点数。
1.  bc是一个数学运算的高级工具</p>

<pre><code>&gt; ➜  ~ echo "4 * 132.23123" | bc
</code></pre>

<p>528.92492
➜  ~  no=34
➜  ~  result1=<code>echo "$no * 1.534" | bc</code>
➜  ~  echo $result1
52.156</p>

<ol>
<li><p>设定小数精度</p>

<blockquote><p>➜  ~  echo &ldquo;scale=2;10/3&rdquo; | bc
3.33</p></blockquote></li>
<li><p>进制转换
 <code>
 ➜  ~  no=100
 ➜  ~  echo "obase=2;$no" | bc
 1100100
 ➜  ~  no=1100100
 ➜  ~  echo "obase=10;ibase=2;$no" | bc
 100
</code></p></li>
<li><p>计算平方以及平方根
 <code>
 ➜  ~  echo "sqrt(100)" | bc
 10
 ➜  ~  echo "10^10" | bc
 10000000000
</code></p></li>
</ol>


<hr />

<h3>1.5文件描述符和重定向</h3>

<ol>
<li>预备知识</li>
<li>stdin(标准输入)  0</li>
<li>stdout(标准输出) 1</li>
<li><p>stderr(标准错误) 2</p></li>
<li><p>自定义文件描述符</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
